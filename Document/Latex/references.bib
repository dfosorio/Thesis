@book{Abrial1996,
   abstract = {Includes index. J-R Abrial, the inventor of B, has written the book in such a way that it can be used for self-study or for reference. It is in four parts, the first dealing with the mathematical foundations, including a systematic construction of predicate logic and set theory, and the definition of the various mathematical structures that are needed to formalise software systems; special emphasis is placed on the notion of proof. The second part contains a presentation of the Generalised Substitution Language and of the Abstract Machine Notation, which are both used to specify software systems; examples are given to show how large specifications can be constructed systematically. The next part introduces the two basic programming features of sequencing and loop, with examples showing how to construct small algorithms. The last part covers the very important notion of refinement. It shows how to construct large software systems by means of layered architectures of modules. It culminates in the presentation of several examples of complete development with a special emphasis on the methodological approach. Finally, appendices give summaries of all the logical and mathematical definitions and of all the rules and proof obligations. With the appearance of the B-Book, formal methods practitioners, computer scientists, and systems developers at last will have access to what is both the definitive account of the B method, and one of the standard references on the formal approach to the construction of software systems. The B method is a means for specifying, designing and coding software systems. The long-awaited B-Book is the standard reference for everything concerning this method. It contains the mathematical basis on which it is founded, the precise definitions of the notations used, and a large number of examples illustrating its use in practice. Machine derived contents note: Tribute -- Foreword -- Introduction -- Part I. Mathematics: 1. Mathematical reasoning -- 2. Set notation -- 3. Mathematical objects -- Part II. Abstract Machines:. 4. Introduction to abstract machines -- 5. Formal definition of abstract machines -- 6. Theory of abstract machines -- 7. Constructing large abstract machines -- 8. Examples of abstract machines -- Part III. Programming: 9. Sequencing and loop -- 10. Programming examples -- Part IV. Refinement: 11. Refinement -- 12. Constructing large software systems -- 13. Examples of refinement -- Appendixes -- Index.},
   author = {Jean-Raymond. Abrial},
   isbn = {978-0-521-02175-3},
   pages = {779},
   publisher = {Cambridge University Press},
   title = {The B-book : assigning programs to meanings},
   year = {1996},
}
@book{Abrial2011,
   abstract = {A practical text suitable for an introductory or advanced course in formal methods, this book presents a mathematical approach to modelling and designing systems using an extension of the B formal method: Event-B. Based on the idea of refinement, the author's systematic approach allows the user to construct models gradually and to facilitate a systematic reasoning method by means of proofs. Readers will learn how to build models of programs and, more generally, discrete systems, but this is all done with practice in mind. The numerous examples provided arise from various sources of computer system developments, including sequential programs, concurrent programs and electronic circuits. The book also contains a large number of exercises and projects ranging in difficulty. Each of the examples included in the book has been proved using the Rodin Platform tool set, which is available free for download at www.event-b.org.},
   author = {Jean Raymond Abrial},
   doi = {10.1017/CBO9781139195881},
   isbn = {9781139195881},
   journal = {Modeling in Event-B: System and Software Engineering},
   month = {1},
   pages = {1-586},
   publisher = {Cambridge University Press},
   title = {Modeling in event-b: System and software engineering},
   volume = {9780521895569},
   url = {https://www.cambridge.org/core/books/modeling-in-eventb/F39FF5F1B60F0AA585718B8E6A4F9DD7},
   year = {2011},
}
@misc{Rodin,
   title = {Event-B and the {Rodin} Platform},
   howpublished = {\url{http://www.event-b.org/}},
   Author = "Event-B.org"
}

@article{Iliasov2010,
   abstract = {Recently, Space Systems Finland has undertaken formal Event B development of a part of the on-board software for the BepiColombo space mission. As a result, lack of modularisation mechanisms in Event B has been identified as a serious obstacle to scalability. One of...},
   author = {Alexei Iliasov and Elena Troubitsyna and Linas Laibinis and Alexander Romanovsky and Kimmo Varpaaniemi and Dubravka Ilic and Timo Latvala},
   doi = {10.1007/978-3-642-11811-1_14},
   isbn = {3642118100},
   issn = {03029743},
   journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
   pages = {174-188},
   publisher = {Springer, Berlin, Heidelberg},
   title = {Supporting Reuse in Event B Development: Modularisation Approach},
   volume = {5977 LNCS},
   url = {https://link.springer.com/chapter/10.1007/978-3-642-11811-1_14},
   year = {2010},
}
@article{Comptier2017,
   abstract = {This paper describes a safety analysis effort on RATP’s communication-based train control (CBTC) system Octys. This CBTC is designed for multi-sourcing and brownfield deployment on an existing interlocking infrastructure. Octys is already in operation on...},
   author = {Mathieu Comptier and David Deharbe and Julien Molinero Perez and Louis Mussat and Thibaut Pierre and Denis Sabatier},
   doi = {10.1007/978-3-319-68499-4_10},
   isbn = {9783319684987},
   issn = {16113349},
   journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
   pages = {148-159},
   publisher = {Springer, Cham},
   title = {Safety Analysis of a CBTC System: A Rigorous Approach with Event-B},
   volume = {10598 LNCS},
   url = {https://link.springer.com/chapter/10.1007/978-3-319-68499-4_10},
   year = {2017},
}
@article{Banach2015,
   abstract = {Faced with the increasing need for correctly designed hybrid and cyber-physical systems today, the problem of including provision for continuously varying behaviour as well as the usual discrete changes of state is considered in the context of Event-B. An extension of Event-B called Hybrid Event-B is presented, that accommodates continuous behaviours (called pliant events) in between familiar discrete transitions (called mode events in this context). The continuous state change can be specified by a combination of indirect specification via ordinary differential equations, or direct specification via assignment of variables to values that depend on time, or indirect specification by demanding that behaviour obeys a time dependent predicate. The syntactic elements of the extension are discussed, and the semantics is described in terms of the properties of time dependent valuations of variables. Refinement is examined in detail, with reference to the notion of refinement inherited from discrete Event-B. A full suite of proof obligations is presented, covering all aspects of the new framework. A selection of examples and case studies is presented. A particular challenge - bearing in mind the desirability of conforming to existing intuitions about discrete Event-B, and the impact on tool support (as embodied in tools for discrete Event-B like Rodin) - is to design the whole framework so as to disturb as little as possible the existing structures for handling discrete Event-B.},
   author = {Richard Banach and Michael Butler and Shengchao Qin and Nitika Verma and Huibiao Zhu},
   doi = {10.1016/J.SCICO.2015.02.003},
   issn = {0167-6423},
   journal = {Science of Computer Programming},
   keywords = {Event-B,Formal development,Hybrid systems,Refinement},
   month = {7},
   pages = {92-123},
   publisher = {Elsevier},
   title = {Core Hybrid Event-B I: Single Hybrid Event-B machines},
   volume = {105},
   year = {2015},
}
@article{Grid,
   abstract = {Computational grids have become widespread in organizations for handling their need for computational resources and the vast amount of available information. Grid systems, and other distributed systems, are often complex and formal reasoning about them is needed, in order to ensure their correctness and to structure their development. Event B is a formal method with tool support that is meant for stepwise development of distributed systems. To facilitate the implementation of grid systems we here propose extensions to Event B that take grid specific features into account. We add new constructs to model the client-server architecture of grid systems, as well as important features like communication and synchronisation. We introduce the extensions in such a manner that the necessary proof obligations are automatically generated and the system can be implemented in a straightforward manner. © Springer-Verlag Berlin Heidelberg 2005.},
   author = {Pontus Boström and Marina Waldén},
   doi = {10.1007/11415787_9},
   issn = {03029743},
   journal = {Lecture Notes in Computer Science},
   pages = {142-161},
   publisher = {Springer Verlag},
   title = {An extension of event B for developing grid systems},
   volume = {3455},
   year = {2005},
}
@article{Morgan2005,
   abstract = {Among the many opportunities offered by computational semantics for probability, the challenge of probabilistic Event B (pEB) is one of the most attractive. The B method itself is now almost 20 years old, and has been much improved and adapted over that time by the many projects to which it has been applied, and by its philosophy - right from the start - that it must be practical, effective and amenable to tool support.; more recently, Event B has extended it and altered its style of use. The probabilistic-program semantics we appeal to is even older (in Kozen's original form), but has only recently been "revived" in the context of B-style abstraction and refinement. The especial attraction of putting the two together is the likely interplay between the probabilistic theory, on the one hand, and the decades of practical experience that have by now been built-in to the B approach, on the other. In particular, there are areas where a full theoretical treatment of probability, concurrency, abstraction and refinement - all at once - seems prohibitively complex; and yet in practice either the complexities seldom occur, or the exigencies of B's having been so-often applied to real, nontoy problems has forced it to evolve styles for avoiding such complexities. In short, we want to use (event) B to guide us towards the issues that truly are important. Rabin's randomized mutual-exclusion algorithm is used as a motivating case study. © Springer-Verlag Berlin Heidelberg 2005.},
   author = {Carroll Morgan and Thai Son Hoang and Jean Raymond Abrial},
   doi = {10.1007/11415787_10},
   issn = {03029743},
   journal = {Lecture Notes in Computer Science},
   pages = {162-171},
   publisher = {Springer Verlag},
   title = {The challenge of probabilistic event B - Extended abstract},
   volume = {3455},
   year = {2005},
}
@article{Hallerstede2007,
   abstract = {Event-B is a notation and method for discrete systems modelling by refinement. We introduce a small but very useful construction: qualitative probabilistic choice. It extends the expressiveness of Event-B allowing us to prove properties of systems that could not be formalised in Event-B before. We demonstrate this by means of a small example, part of a larger Event-B development that could not be fully proved before. An important feature of the introduced construction is that it does not complicate the existing Event-B notation or method, and can be explained without referring to the underlying more complicated probabilistic theory. The necessary theory [18] itself is briefly outlined in this article to justify the soundness of the proof obligations given. We also give a short account of alternative constructions that we explored, and rejected. © Springer-Verlag Berlin Heidelberg 2007.},
   author = {Stefan Hallerstede and Thai Son Hoang},
   doi = {10.1007/978-3-540-73210-5_16},
   isbn = {3540732098},
   issn = {16113349},
   journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
   pages = {293-312},
   publisher = {Springer Verlag},
   title = {Qualitative probabilistic modelling in Event-B},
   volume = {4591 LNCS},
   year = {2007},
}
@article{Tarasyuk2010,
   abstract = {Event-B provides us with a powerful framework for correct-by-construction system development. However, while developing dependable systems we should not only guarantee their functional correctness but also quantitatively assess their dependability attributes. In this...},
   author = {Anton Tarasyuk and Elena Troubitsyna and Linas Laibinis},
   doi = {10.1007/978-3-642-16265-7_20},
   isbn = {3642162649},
   issn = {03029743},
   journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
   keywords = {Event-B,cyclic system,probability,refinement,reliability},
   pages = {275-289},
   publisher = {Springer, Berlin, Heidelberg},
   title = {Towards Probabilistic Modelling in Event-B},
   volume = {6396 LNCS},
   url = {https://link.springer.com/chapter/10.1007/978-3-642-16265-7_20},
   year = {2010},
}
@article{Aouadhi2017,
   abstract = {We propose a fully probabilistic extension of Event-B where all the non-deterministic choices are replaced with probabilities. We present the syntax and the semantics of this extension and introduce novel and adapted proof obligations for proving the correctness of probabilistic Event-B models. As a preliminary step towards handling refinement of probabilistic Event-B models, we propose sufficient conditions for the almost-certain convergence of a set of events and express them in terms of proof obligations. We illustrate our work by presenting a case study specified in both standard and probabilistic Event-B.},
   author = {Mohamed Amine Aouadhi and Benoît Delahaye and Arnaud Lanoix},
   doi = {10.1145/3019612.3019823},
   isbn = {9781450344869},
   journal = {Proceedings of the ACM Symposium on Applied Computing},
   keywords = {Event-B,Markov chains,Probabilistic systems},
   month = {4},
   pages = {1348-1355},
   publisher = {Association for Computing Machinery},
   title = {Moving from event-B to probabilistic event-B},
   volume = {Part F128005},
   year = {2017},
}
@book{Clavel2007,
   abstract = {This book fills this void by including a collection of representative articles, which gives an up-to-date and comprehensive snapshot of the Peer-to-Peer field. One of the main challenges that faces any book covering such a vast and relatively new territory is how to structure the material. This book resolves this conundrum by dividing the material into roughly three parts. The first part of the book covers the basics of Peer-to-Peer designs, un- structured and structured systems, and presents a variety of applications in- cluding e-mail, multicast, Grid computing, andWeb services. The book then goes beyond describing traditional systems, by discussing general aspects of the Peer-to-Peer systems, namely the self-organization nature of the Peer- to-Peer systems, and the all-important topic of evaluating these systems. In addition, the book illustrates the broad applicability of Peer-to-Peer by dis- cussing the impact of the Peer-to-Peer technologies in two computer-science areas, namely searching and information retrieval, and mobile computing. No Peer-to-Peer book would be complete without discussing the business model, accounting, and security. This book touches on these topics in the last part.},
   author = {Manuel Clavel and Francisco Durán and Steven Eker and Patrick Lincoln and Narciso Martí-Oliet and José Meseguer and Carolyn Talcott},
   doi = {10.1007/978-3-540-71999-1},
   journal = {All About Maude - A High-Performance Logical Framework},
   publisher = {Springer Berlin Heidelberg},
   title = {All About Maude - A High-Performance Logical Framework},
   year = {2007},
}
@article{Agha2006,
   abstract = {We introduce a rewrite-based specification language for modelling probabilistic concurrent and distributed systems. The language, based on PMaude, has both a rigorous formal basis and the characteristics of a high-level rule-based programming language. Furthermore, we provide tool support for performing discrete-event simulations of models written in PMaude, and for statistically analyzing various quantitative aspects of such models based on the samples that are generated through discrete-event simulation. Because distributed and concurrent communication protocols can be modelled using actors (concurrent objects with asynchronous message passing), we provide an actor PMaude module. The module aids writing specifications in a probabilistic actor formalism. This allows us to easily write specifications that are purely probabilistic - and not just non-deterministic. The absence of such (un-quantified) non-determinism in a probabilistic system is necessary for a form of statistical analysis that we also discuss. Specifically, we introduce a query language called Quantitative Temporal Expressions (or QuaTEx in short), to query various quantitative aspects of a probabilistic model. We also describe a statistical technique to evaluate QuaTEx expressions for a probabilistic model. © 2006 Elsevier B.V. All rights reserved.},
   author = {Gul Agha and José Meseguer and Koushik Sen},
   doi = {10.1016/J.ENTCS.2005.10.040},
   issn = {1571-0661},
   issue = {2},
   journal = {Electronic Notes in Theoretical Computer Science},
   keywords = {PMaude,QuaTEx,Specification language,actors,non-deterministic specification,probabilistic specification,query language},
   month = {5},
   pages = {213-239},
   publisher = {Elsevier},
   title = {PMaude: Rewrite-based Specification Language for Probabilistic Object Systems},
   volume = {153},
   year = {2006},
}
@article{AlTurki2011,
   abstract = {Statistical model checking is an attractive formal analysis method for probabilistic systems such as, for example, cyber-physical systems which are often probabilistic in nature. This paper is about drastically increasing the scalability of statistical model...},
   author = {Musab AlTurki and José Meseguer},
   doi = {10.1007/978-3-642-22944-2_28},
   isbn = {9783642229435},
   issn = {03029743},
   journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
   pages = {386-392},
   publisher = {Springer, Berlin, Heidelberg},
   title = {PVESTA: A Parallel Statistical Model Checking and Quantitative Analysis Tool},
   volume = {6859 LNCS},
   url = {https://link.springer.com/chapter/10.1007/978-3-642-22944-2_28},
   year = {2011},
}
@article{Olarte,
   author = {Carlos Olarte and Daniel Osorio and Camilo Rocha},
   title = {A Rewriting Logic Semantics and Statistical Analysis for Probabilistic Event-B},
}

@misc{EBRP,
   title = {The {EBRP} project},
   howpublished = {\url{https://www.irit.fr/EBRP}},
   Author = "Agence Nationale de la Researche"
}


@article{Woodcock2009,
   abstract = {Formal methods use mathematical models for analysis and verification at any part of the program life-cycle. We describe the state of the art in the industrial use of formal methods, concentrating on their increasing use at the earlier stages of specification and design. We do this by reporting on a new survey of industrial use, comparing the situation in 2009 with the most significant surveys carried out over the last 20 years. We describe some of the highlights of our survey by presenting a series of industrial projects, and we draw some observations from these surveys and records of experience. Based on this, we discuss the issues surrounding the industrial adoption of formal methods. Finally, we look to the future and describe the development of a Verified Software Repository, part of the worldwide Verified Software Initiative. We introduce the initial projects being used to populate the repository, and describe the challenges they address. © 2009 ACM.},
   author = {Jim Woodcock and Peter Gorm Larsen and Juan Bicarregui and John Fitzgerald},
   doi = {10.1145/1592434.1592436},
   issn = {03600300},
   issue = {4},
   journal = {ACM Computing Surveys},
   keywords = {Experimental software engineering,Formal methods surveys,Grand challenges,Verified software initiative,Verified software repository},
   month = {10},
   title = {Formal methods: Practice and experience},
   volume = {41},
   year = {2009},
}

@Misc{tool.website,
  title =        "THE TOOL",
  author =       "Carlos Olarte and Daniel Osorio and Camilo Rocha",
  year =         "2022",
  howpublished = "\url{https://github.com/carlosolarte/EventB2Maude}",
}

@article{Butler2013,
   author = {Michael Butler and Asieh Salehi Fathabadi and Renato Silva},
   doi = {10.1002/9781118561829.CH7},
   isbn = {9781848213630},
   journal = {Industrial Use of Formal Methods: Formal Verification},
   keywords = {Enriching,Event-B and Rodin,MetroSystem_M2,Model decomposition,Proof obligations},
   month = {1},
   pages = {215-245},
   publisher = {John Wiley and Sons},
   title = {Event-B and Rodin},
   year = {2013},
}

@book{PeterMaude,
   author = {Peter Csaba Ölveczky},
   city = {London},
   doi = {10.1007/978-1-4471-6687-0},
   isbn = {978-1-4471-6686-3},
   publisher = {Springer London},
   title = {Designing Reliable Distributed Systems},
   url = {http://link.springer.com/10.1007/978-1-4471-6687-0},
   year = {2017},
}

@article{LTS,
   abstract = {In this paper, we investigate how to represent the behaviour of B abstract systems by finite labelled transition systems (LTS). We choose to decompose the state of an abstract system in several disjunctive predicates. These predicates provide the basis for defining a...},
   author = {Didier Bert and Francis Cave},
   doi = {10.1007/3-540-40911-4_14},
   isbn = {3540411968},
   issn = {16113349},
   journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
   pages = {235-254},
   publisher = {Springer, Berlin, Heidelberg},
   title = {Construction of Finite Labelled Transition Systems from B Abstract Systems},
   volume = {1945 LNCS},
   url = {https://link.springer.com/chapter/10.1007/3-540-40911-4_14},
   year = {2000},
}

@Misc{RodinDevelop,
   title = {Plug-in Tutorial},
   howpublished = "\url{https://wiki.event-b.org/index.php/Plug-in_Tutorial}",
}

@article{MaudeManual,
   author = {Manuel Clavel and Francisco Durán and Steven Eker and Santiago Escobar and Patrick Lincoln and Narciso Martí-Oliet and José Meseguer and Rubén Rubio and Carolyn Talcott},
   title = {Maude Manual (Version 3.2.1)},
   year = {2022}
}

@Misc{RodinWiki,
   title = {Event-B and Rodin Documentation Wiki},
   howpublished = "\url{https://wiki.event-b.org/index.php/Main_Page}",
}

@article{Bruni2006,
   abstract = {Rewriting logic (RL) is a logic of actions whose models are concurrent systems. Rewrite theories involve the specification of equational theories of data and state structures together with a set of rewrite rules that model the dynamics of concurrent systems. Since its introduction, more than one decade ago, RL has attracted the interest of both theorists and practitioners, who have contributed in showing its generality as a semantic and logical framework and also as a programming paradigm. The experimentation conducted in these years has suggested that some significant extensions to the original definition of the logic would be very useful in practice. These extensions may develop along several dimensions, like the choice of the underlying equational logic, the kind of side conditions allowed in rewrite rules and operational concerns for the execution of certain rewrites. In particular, the Maude system now supports subsorting and conditional sentences in the equational logic for data, and also frozen arguments to block undesired nested rewrites; moreover, it allows equality and membership assertions in rule conditions. In this paper, we give a detailed presentation of the inference rules, model theory, and completeness of such generalized rewrite theories. Our results provide a mathematical semantics for Maude, and a foundation for formal reasoning about Maude specifications.},
   author = {Roberto Bruni and José Meseguer},
   doi = {10.1016/j.tcs.2006.04.012},
   journal = {Theoretical Computer Science},
   keywords = {Conditional rewriting logic,Contextual rewrites,Membership equational logic,Semantics},
   pages = {386-414},
   title = {Semantic foundations for generalized rewrite theories},
   volume = {360},
   url = {www.elsevier.com/locate/tcs},
   year = {2006},
}


@misc{Lecture1,
  Author = {José Meseguer},
  Institution = {University of Illinois},
  howpublished = "\url{https://nms.kcl.ac.uk/maribel.fernandez/PhD-SummerSchoolMaude.html}",
  Year = {2022},
  Title = {Maude Summer School: Lecture 1},
}


@misc{Lecture3,
  Author = {José Meseguer},
  Institution = {University of Illinois},
  howpublished = "\url{https://nms.kcl.ac.uk/maribel.fernandez/PhD-SummerSchoolMaude.html}",
  Year = {2022},
  Title = {Maude Summer School: Lecture 3-II},
}
